//#############################################################################
//  作者：稲垣達也
//  32bit Int型をBit単位で管理し、32個のBool型として扱う構造体
//#############################################################################
using System;

/// <summary>
/// 32個のbool型を一括して扱う構造体
/// </summary>
public struct BoolArray32 {

    public const int MAXARRAY = 32;
    private Int32 m_bit;
    
    //プロパティ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    public int Length { get{ return MAXARRAY; } }
    public int AllBit { get{ return m_bit;  }
                        set{ m_bit = value; } }

    //インデクサ===============================================================
    public bool this[int i] {
        get{ 
            return ((m_bit >> i) & 0x0001) == 0x0001; 
        }
        set{ 
            m_bit ^= ((0x0001 << i) & m_bit);
            m_bit |= ( ((value)?0x00001:0x0000) << i);
        }
    }

    //コンストラクタ===========================================================
    public BoolArray32(bool initBool) {
        m_bit = (initBool) ? 0xFFFFFF : 0x0000;
    }

    ///////////////////////////////////////////////////////////////////////////
    //公開変数
    ///////////////////////////////////////////////////////////////////////////
    //ゲット===================================================================	
    //  指定した要素番号にあるBitを返す
    //    第一引数：要素数
    //    第二引数：代入する値
    //=========================================================================
    public int GetBit(int i){
        return ((m_bit >> i) & 0x0001);
    }
    //全て取得=================================================================
    //  現在の情報をまとめて取得
    //=========================================================================
    public int GetAllBit() {
        return m_bit;
    }
    
    //セット===================================================================	
    //  指定した要素番号に代入する
    //    第一引数：要素数
    //    第二引数：代入する値
    //=========================================================================
    public void SetBit(int i, int v){
        m_bit ^= ((0x0001 << i) & m_bit);
        m_bit |= ( ((v != 0)?0x00001:0x0000) << i);
    }
    //全てに代入===============================================================
    //  指定したビットの状態にする
    //=========================================================================
    public void SetAllBit(int  v) {
        m_bit = v;
    }


    //論理=====================================================================
    //論理積===================================================================
    //  指定した要素番号のビットでAND演算する。
    //
    //    第一引数　：可変長引数の要素数
    //    可変長引数：演算する要素番号
    //    戻り理　　：真）すべて真である　偽）それ以外
    //=========================================================================
    public bool And(params int[] index) {
        Int32 mask = 0x0000;
        for(int i=0; i < index.Length; i++) {
            mask |= 0x0001 << index[i];
        }
        return (m_bit & mask) == mask; 
    }

    //論理和==================================================================
    //  指定した要素番号のビットでOR演算する。
    //
    //    第一引数　：可変長引数の要素数
    //    可変長引数：演算する要素番号
    //    戻り理　　：真）どれか一つ真である　偽）それ以外
    //========================================================================
    public bool Or(params int[] index) {
        Int32 mask = 0x0000;
        for(int i=0; i < index.Length; i++) {
            mask |= 0x0001 << index[i];
        }
        return (m_bit & mask) != 0x0000; 
    }



    //デバック用===============================================================
    //=========================================================================
    //public string OutputDebugText() {
    //    string s = "";
    //    for(int i = 0; i < MAXARRAY; i++) {
    //        s += ("[" +i + "]=" + this[i] + " ");
    //    }
    //    return s;
    //}
    public string OutputDebugText(int lineBreak = 0) {
        string s = "";
        bool b = (lineBreak != 0);
        for(int i = 0; i < MAXARRAY; i++) {
            s += ("[" +i + "]=" + this[i] + " ");
            if(b && i % lineBreak == (lineBreak - 1)) {
                s += "\n";
            }
        }
        return s;
    }
    public string OutputDebugText(int startIndex, int endIndex) {
        string s = "";
        for(int i = startIndex; i < endIndex; i++) {
            s += ("[" +i + "]=" + this[i] + " ");
        }
        return s;
    }
}
